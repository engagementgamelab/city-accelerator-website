// REM TOOLS

// Convert any px value into its rem equivalent.

@function wcss-rem($value) {

  @if (type-of($value) == number) {

    @if (unit($value) != "px") {
      @error "`#{$value}` needs to be a pixel value.";
    }

  } @else {
    @error "`#{$value}` needs to be a number.";
  }

  @return $value / $wcss-base-font-size * 1rem;

}


// Mixin to create a declaration whose value is a rem unit. Also provide pixel
// fallback.
//
// .simple-usage {
//   @include wcss-rem(padding, 10px);
// }

@mixin wcss-rem($property, $value) {

  @if (type-of($value) == number) {

    @if (unit($value) != "px") {
      @error "`#{$value}` needs to be a pixel value.";
    }

  } @else {
    @error "`#{$value}` needs to be a number.";
  }

  // We provide a `px` fallback for old IEs not supporting `rem` values.
  #{$property}: $value;

  #{$property}: wcss-rem($value);

}

// Mixin to create font-size declarations in rem units with pixel fallbacks.
// Uses the typographic scale set in settings/typography.
//
// .simple-usage {
//   @include wcss-font-size(alpha);
// }

@mixin wcss-font-size($name) {
  @if (type-of($name) != string) {
    @error "`#{$name}` needs to be a string.";
  }

  @include wcss-rem(font-size, map-get($wcss-typographic-scale, $name));
}